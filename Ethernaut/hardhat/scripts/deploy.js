async function main() {
    const [owner, hacker]                          = await ethers.getSigners();
    const amount                                   = ethers.parseEther("0.00001");
    let contract1, contract2, contract3, contract4 = null;

    contract1 = await ethers.deployContract("Instance", [ethers.encodeBytes32String("ethernaut0")]);
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Fallback", { from: owner });
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Fallout");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("CoinFlip");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("CoinFlipExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Telephone", { from: owner });
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("TelephoneExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Token", [21000000], { from: owner });
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Delegate", [owner]);
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("Delegation", [contract1], { from: owner });
    await contract2.waitForDeployment();
    contract1 = await ethers.deployContract("Force");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("ForceExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Vault", [ethers.encodeBytes32String("A very strong secret password")]);
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("King", { from: owner, value: amount });
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("KingExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Reentrance");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("ReentranceExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Elevator");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("ElevatorExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Privacy", [[ethers.encodeBytes32String("0"), ethers.encodeBytes32String("1"), ethers.encodeBytes32String("2")]]);
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("GatekeeperOne");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("GatekeeperOneExploit", { signer: hacker });
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("GatekeeperTwo");
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("GatekeeperTwoExploit", [contract1], { signer: hacker });
    await contract2.waitForDeployment();
    contract1 = await ethers.deployContract("NaughtCoin", [owner]);
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("LibraryContract");
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("LibraryContract");
    await contract2.waitForDeployment();
    contract3 = await ethers.deployContract("Preservation", [contract1, contract2]);
    await contract3.waitForDeployment();
    contract1 = await ethers.deployContract("PreservationExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Recovery");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("RecoveryExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("MagicNum");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("MagicNumExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("AlienCodex");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("AlienCodexExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Denial");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("DenialExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Shop");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("ShopExploit");
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("Dex", { from: owner });
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("SwappableToken", [contract1, "Token 1", "TKN1", 110], { from: owner });
    await contract2.waitForDeployment();
    contract2 = await ethers.deployContract("SwappableToken", [contract1, "Token 2", "TKN1", 110], { from: owner });
    await contract2.waitForDeployment();
    contract1 = await ethers.deployContract("DexTwo", { from: owner });
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("SwappableTokenTwo", [contract1, "Token 1", "TKN1", 110], { from: owner });
    await contract2.waitForDeployment();
    contract2 = await ethers.deployContract("SwappableTokenTwo", [contract1, "Token 2", "TKN1", 110], { from: owner });
    await contract2.waitForDeployment();
    contract1 = await ethers.deployContract("DexTwoExploit", ["Exploit 1", "E1", 400, hacker]);
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("DexTwoExploit", ["Exploit 2", "E1", 400, hacker]);
    await contract1.waitForDeployment();
    contract1 = await ethers.deployContract("PuzzleWallet");
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("PuzzleProxy", [owner, contract1, contract1.interface.encodeFunctionData("init", [ethers.parseEther("100")])]);
    await contract2.waitForDeployment();
    contract1 = await ethers.deployContract("Engine");
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("Motorbike", [contract1], { from: owner });
    await contract2.waitForDeployment();
    contract1 = await ethers.deployContract("LegacyToken", { from: owner });
    await contract1.waitForDeployment();
    contract2 = await ethers.deployContract("Forta");
    await contract2.waitForDeployment();
    contract3 = await ethers.deployContract("CryptoVault", [hacker]);
    await contract3.waitForDeployment();
    contract4 = await ethers.deployContract("DoubleEntryPoint", [contract1, contract2, contract3, hacker], { from: owner });
    await contract4.waitForDeployment();
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
